/** * @module analytics-proxy **/var    BASE_PATH    = File(module.id).parent.path,	pixel        = loadImage(BASE_PATH + 'static/pixel.gif'),	badge        = loadImage(BASE_PATH + 'static/badge.gif'),	pageTemplate = loadText(BASE_PATH + 'ga-beacon/page.html');exports.URLS = {    GOOGLE: "http://www.google-analytics.com/collect"};exports.start = function init() {	addHttpRequestHandler('^/analytics-proxy', 'analytics-proxy', 'imageRequestHandler');};/** * @param {Array}   params * @param {string}  userAgent * @param {string}  cid **/function logHit_GOOGLE(params, userAgent, cid) {	// https://developers.google.com/analytics/devguides/collection/protocol/v1/reference		var	    xhr,	    url,	    payload;    url = exports.URLS.GOOGLE;	payload = {		"v":   "1",        // protocol version = 1		"t":   "pageview", // hit type		"tid": params[0],  // tracking / property ID		"cid": uuid,        // unique client ID (server generated UUID)		"dp":  params[1]   // page path	};    xhr = new XMLHttpRequest();    xhr.open("POST", url, true);	xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");	xhr.setRequestHeader("User-Agent", userAgent);	xhr.send(JSON.stringify(payload));	if (xhr.status >= 300 || !xhr.responseText) {		return new Error("A collector POST error: " + xhr.status + '\n' + xhr.responseText);	} else {		console.log("GA collector status: %v, cid: %v", xhr.status, cid)	}	return null;}function generateCookie(name, value, path) {    var        cookie;        cookie = name + '=' + value;    if (path) {        cookie += ';path=' + path;    }        return cookie;}function getCookieValue(cookies, name) {    var        value;    cookies = cookies.split('\n');    cookies.some(function parseCookies(current) {        current = current.split('=');        if (current[0] !== name) {            return false;        }        value = current[1].split(';')[0];        return true;    });        return value;}exports.imageRequestHandler = function imageRequestHandler(request, response) {    var        params,        cookies,        cid;	params = request.urlPath.split('/').slice(0, 2);	// / -> redirect	/*	if (params[0].length === 0) {		http.Redirect(w, r, "https://github.com/igrigorik/ga-beacon", http.StatusFound)		return	}	*/	// /account -> account template	if (params.length === 1) {		response.contentType = 'text/html';		templateParams = {			Account: params[0]		};        html = Mustache.render(pageTemplate, templateParams);		if (!html) {		    response.status = 500;		    return [		        "could not show account page",		        "Cannot execute template: page.html"		    ].join('\n<br>');		}				return html;	}	// /account/page -> GIF + log pageview to GA collector	cookies = request.headers.Cookie;	if (!cookies) {	    cid = generateUUID();		console.log("Generated new client UUID: %v", cid);		cookies = generateCookie("cid", cid, "/" + params[0]);		response.headers['Set-Cookie'] = cookies;	} else {		cid = getCookieValue(cookies, 'cid');		console.log("Existing CID found: %v", cid)	}	if (cid) {		response.headers["Content-Type"] = "image/gif";		response.headers["Cache-Control"] = "no-cache";		response.headers["CID"] = cid;		logHit_GOOGLE(params, request.headers["User-Agent"], cid);	}	// Write out GIF pixel or badge, based on presence of "pixel" param.	query = url.ParseQuery(r.URL.RawQuery)	if _, ok := query["pixel"]; ok {		w.Write(pixel)	} else {		w.Write(badge)	}}